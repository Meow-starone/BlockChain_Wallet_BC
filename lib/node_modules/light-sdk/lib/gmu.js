let LightJSBridge;
let top;
let noop = function () {};
if(process.env.RUNTIME === "web"){
    if(navigator.userAgent.toLowerCase().indexOf("lightos")!==-1){
        document.addEventListener("deviceready",function(){
            LightJSBridge = window.LightJSBridge;
        })
    }else{
        LightJSBridge = {
            //这里都是模拟行为
            call(func,params,cb){
                if(process.env.NODE_ENV==="dev"){
                    console.log(`方法${func}调用了，入参${JSON.stringify(params||{})}`);
                    if(cb) cb();
                }
            }
        }
    }
    top = window;
}else if(process.env.RUNTIME === "native"){
    LightJSBridge = weex.requireModule('LightJSBridge');
    top = global;
}

module.exports = {
    /**
     * 从手机选择照片或拍照功能-Base64是图片的64位编码；Blob是图片的二进制编码，按需使用
     * @param params
     * @param cb
     */
    chooseImage: function (params, cb) {
        LightJSBridge.call("native.chooseImage", {
            cropPhoto: params.cropPhoto,
            aspectXY:params.aspectXY,
            maxWidth: params.maxWidth
        }, function (data) {
            let path = {
                Base64: data.data.result,
                Blob: convertBase64ToBlob(data.data.result)
            };
            cb && cb(path);
        });
    },
    /**
     * 获取剪贴板快照
     * @param cb
     */
    getClipboardText: function (cb) {
        LightJSBridge.call("native.getClipBoardContent", {}, function (data) {
            cb && cb(data.data.result);
        });
    },
    /**
     * 设置剪贴板内容
     * @param string
     * @param cb
     */
    setClipboardText:function (string, cb) {
        LightJSBridge.call("native.setClipBoardContent",{
            "value":string
        },cb);
    },
    /**
     * 获取url内容
     * @param params
     * @param cb
     */
    fetchURL: function (params, cb) {
        LightJSBridge.call("native.fetchURL", {
            "url": params.url
        }, function (data) {
            if(data&&data.data){
                data = data.data.result
            }else{
                data = '';
            }
            if(cb){
                cb(data);
            }
        });
    },
    /**
     * 本地存储数据
     * @param data
     * @param cb
     */
    writeGlobalData: function (data, cb) {
        let length = Object.keys(data).length;
        for (let key in data) {
            if (data[key] !== null) {
                LightJSBridge.call("native.writeData", {
                    key: key,
                    value: data[key] || {}
                }, function () {
                    length--;
                    if (length == 0) {
                        cb && cb();
                    }
                });
            } else {
                LightJSBridge.call("native.deleteData", {
                    "key": key
                }, function () {
                    length--;
                    if (length == 0) {
                        cb && cb();
                    }
                });
            }
        }
    },
    /**
     * 本地读取数据
     * @param key
     * @param cb
     */
    readGlobalData: function (key, cb) {
        LightJSBridge.call("native.readData", {
            key: key,
        }, function (data) {
            if (data && data.data && data.data.result) {
                cb && cb(data.data.result)
            } else {
                cb && cb(null);
            }
        });
    },
    /**
     * web图片本地事件处理-imgUrl是图片地址
     * @param params
     * @param cb
     */
    imageAction: function (params, cb) {
        LightJSBridge.call("native.imageAction", {
            "image": params.url
        }, function () {
            cb && cb();
        });
    },
    /**
     * web返回接口
     */
    back: function () {
        LightJSBridge.call("native.back", {}, null);
    },
    /**
     * 关闭webview接口
     */
    close: function () {
        LightJSBridge.call("native.close", {}, null);
    },
    /**
     * 开始音频采集-maxTime是音频录制的最长时间，以秒为单位
     * @param cb
     * @param maxTime
     */
    startRecord: function (cb, maxTime) {
        LightJSBridge.call("media.audio.startRecord", {
            "duration": maxTime || "60"
        }, function (data) {
            cb && cb(data.data.result);
        });
    },
    /**
     * 结束音频采集
     * @param cb
     */
    stopRecord: function (cb) {
        LightJSBridge.call("media.audio.stopRecord", {}, null);
    },
    /**
     * 分享接口
     * @param params
     * @param cb
     */
    share: function (params, cb) {
        let shareParams = {
            "title": params.title,
            "content": params.content,
            "url": params.url,
            "image": params.image ? params.image : "",
        };
        LightJSBridge.call("social.share", shareParams, null);
    },
    /**
     * 添加导航栏按钮接口
     */
    setButton: function (params, cb) {
        let _actionFunction = 'actionFunction_' + Math.floor(Math.random() * 1000);
        top[_actionFunction] = cb;
        let addParams = {
            "title": params.title,
            "icon": params.icon,
            "position":params.position||"right",
            "action": "javascript:" + _actionFunction + "();"
        };
        LightJSBridge.call("head.addButton", addParams, noop);
    },
    /**
     * 删除导航栏按钮接口
     * @param cb
     */
    removeButton: function (cb) {
        LightJSBridge.call("head.removeButton", {}, cb||noop);
    },
    /**
     * 修改导航栏背景色接口--color是色值，如：#fff
     * @param params
     * @param cb
     */
    setBackgroundColor: function (params, cb) {
        LightJSBridge.call("head.setBackgroundColor", {
            "color": params.color
        }, null);
    },
    /**
     * 二维码扫描接口
     * @param params
     * @param cb
     */
    scanCode: function (params,cb) {
        LightJSBridge.call("qrcode.scan", params, function (data) {
            cb && cb(data.data.result);
        });
    },
    /**
     * 二维码生成接口
     * @param params
     * @param cb
     */
    genCode: function (params,cb) {
        LightJSBridge.call("qrcode.gen", {
            "desc": params.desc,
            "size": params.ewmsize || "300"
        }, function (data) {
            cb && cb(data);
        });
    },
    appPreview: function (params,cb) {
        LightJSBridge.call("system.appPreview", params, cb);
    },
    pageAppear:function (fn) {
        LightJSBridge.onPageAppear = fn;
    },
    /**
     * 设置标题栏标题接口
     * @param params
     * @param cb
     */
    setTitle: function (params, cb) {
        LightJSBridge.call("head.setTitle", {
            "title": params.title
        }, function () {
            cb && cb();
        });
    },
    /**
     * 设置标题栏标题接口
     * @param cb
     */
    getUserInfo: function (cb) {
        LightJSBridge.call("user.getInfo", {}, function (userInfo) {
            if (userInfo.data) {
                cb && cb(userInfo.data.result);
            } else {
                cb()
            }
        })
    },
    /**
     * 打开控制台
     * @param params
     */
    consoleOpen:function(params){
        LightJSBridge.call("console.open",params,null)
    },
    /**
     * 关闭控制台
     */
    consoleHidden:function(){
        LightJSBridge.call("console.hidden",{},null)
    },
    /**
     * 调试页面查看console信息
     * @param cb
     */
    showConsole:function(cb){
        LightJSBridge.showConsole = function (data) {
            cb && cb(data);
        };
    },
    /**
     * 执行js到调试页面
     * @param params
     * @param cb
     */
    debugJs:function(params,cb){
        LightJSBridge.call("console.debugJS",{
            "JS":params.JS
        },function(data){
            cb&&cb(data);
        })
    },
    getSystemInfo:function(cb){
        LightJSBridge.call("native.getSystemInfo",{}, function(data){
            cb&&cb(data);
        });
    },
    logout:function (cb) {
        LightJSBridge.call("user.logout",{}, function(data){
            cb&&cb(data);
        });
    },
    openURL:function (params,cb) {
        LightJSBridge.call("system.openURL",params, function(data){
            cb&&cb(data);
        });
    },
    /**
     * native方法调用通用方法(用户根据已有native方法自己调用)
     * @param method
     * @param params
     * @param cb
     */
    callNative: function (method,params, cb) {
        let outParams = {
            error_no:"0",
            error_info:"success"
        };
        LightJSBridge.call(method,params, function(data){
            // let outParams = {
            //     error_no:data.info ? data.info.errorcode :"0",
            //     error_info:data.info ? data.info.errormessage : "success",
            //     data:data
            // };
            cb&&cb(outParams);
        });
    },
    /**
     * @param cb
     */
    orcCheck:function(cb){
        LightJSBridge.call("face.orcCheck", {}, function(data){
            cb && cb(data.data.result);
        });
    }
};
function convertBase64ToBlob(data) {
    data = data + "";
    let bytes = top.atob(decodeURIComponent(escape(data.replace(/\s/g, ''))));
    let ab = new ArrayBuffer(bytes.length);
    let ia = new Uint8Array(ab);
    for (let i = 0; i < bytes.length; i++) {
        ia[i] = bytes.charCodeAt(i);
    }
    return new Blob([ab], {type: 'image/png'});
}