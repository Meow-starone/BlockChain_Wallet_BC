/**
  * light-sdk v1.0.42
  * (c) 2018 
  */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.LightSDK = global.LightSDK || {})));
}(this, (function (exports) { 'use strict';

var bridge;
if (process.env.RUNTIME === "web") {
    if (navigator.userAgent.toLowerCase().indexOf("lightos") !== -1) {
        document.addEventListener("deviceready", function () {
            bridge = {
                call: function(func, params, cb){
                    window.LightJSBridge.call(func, params, cb);
                }
            };
        });
    } else {
        bridge = {
            //这里都是模拟行为
            //不需要调用到cb
            call: function call(func, params, cb,cbH5) {
                if (process.env.NODE_ENV === "dev") {
                    console.log(("方法" + func + "调用了，入参" + (JSON.stringify(params || {}))));
                }
                //当测试环境下没有调用cb，这里有问题，应该让数据流动继续下去
                    cbH5 && cbH5();
            }
        };
    }
} else if (process.env.RUNTIME === "native") {
    bridge = {
       call: function(func, params, cb){
        weex.requireModule('LightJSBridge').call(func, params, cb);
       }
   };
}

/**
 * LightSDK，原生API调用模块
 * @module native
 */
var native_1 = {
    /**
     * native模块返回值
     * @callback callback
     * @param {object} info 错误号
     * @param {number} info.error_code 错误号
     * @param {string} info.error_message 错误信息
     * @param {object} data 业务处理正常，返回数据
     */

    /**
     * 从相册中选择图片，可以自带拍照
     *
     * @param {Object} params - 接口入参
     * @param {string} params.imagePickType - 选择用摄像头还是相册进行选择，默认2种都显示(carmer,album)单选图片，多选图片传入type为：(CAMERA_MUTIL-ALBUM)
     * @param {string} params.cropPhoto - 是否剪裁
     * @param {string} params.maxWidth - 最大宽度
     * @param {string} params.aspectXY - 宽高比
     * @param {callback} cb 功能处理后的回调函数
     */
    chooseImage: function (params, cb) {
        bridge.call("native.chooseImage", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data:{
                        "result":"/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QMraHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjMtYzAxMSA2Ni4xNDU2NjEsIDIwMTIvMDIvMDYtMTQ6NTY6MjcgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzYgKFdpbmRvd3MpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjAwNzE3MDQ2OEY1MDExRTRBMTVFRTY1MkQxQzA0RUE3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjAwNzE3MDQ3OEY1MDExRTRBMTVFRTY1MkQxQzA0RUE3Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MDA3MTcwNDQ4RjUwMTFFNEExNUVFNjUyRDFDMDRFQTciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MDA3MTcwNDU4RjUwMTFFNEExNUVFNjUyRDFDMDRFQTciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYGCAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBgaFREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAARCAAMAAwDAREAAhEBAxEB/8QAdQABAQEAAAAAAAAAAAAAAAAABAIHAQADAQAAAAAAAAAAAAAAAAACAwUBEAAAAwcCAwkAAAAAAAAAAAASBBQBEQIDEwUVADIxIhYhgbFCkmNFBiYRAAEDBAAHAQAAAAAAAAAAABExAhIAASET8EFhMkIDI7H/2gAMAwEAAhEDEQA/ANtJnvrBa2lCs2zS51ziKFoi8ERaW1pmObLh7YY3Nfzbmt1Vez2ude9nhsr80qY1/rs21rtLhbktFwB/PJ05BfjVKdPLTiU7AucIPKPj46ZvbrJdGYXKcYoNLpgNlEpheM0+2dUobOHDiTwY6vWrgpM4O8wNwdJ9mqTu9cgBab69sW9iYJKVH7HrH47I4736FCv6xj7naL46fKMuhI/Kz7bvGUeoBr//2Q=="
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js接口打开本地二维码扫描页面，扫码成功后在网页中返回扫码结果信息
     *
     * @param {Object} params - 接口入参
     * @param {string} params.sideLength - 扫描区域边长相对于屏幕较短边长的百分比，取值范围(0,1]
     * @param {string} params.offsetX - 扫描区域相对于屏幕左侧的偏移百分比，取值范围[0,1]
     * @param {string} params.offsetY - 扫描区域相对于屏幕顶部的偏移百分比，取值范围[0,1]
     * @param {callback} cb 功能处理后的回调函数
     */
    scanCode: function (params, cb) {
        bridge.call("qrcode.scan", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }, 
                    "data":{"result":"http://www.hundsun.com"}
                };
            cb && cb(data);
        });
    },
    /**
     * 返回指定字符串的二维码编码结果的base64编码字符串
     *
     * @param {Object} params - 接口入参
     * @param {string} params.desc - 需要被编码成二维码的内容
     * @param {string} params.size - 二维码尺寸,默认为300x300，
     * @param {callback} cb 功能处理后的回调函数
     */
    genCode: function (params, cb) {
        bridge.call("qrcode.gen", params, cb,function(){
            var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                }, 
                "data":
                    {"result":"iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAIAAAD2HxkiAAAF0UlEQVR4nO3dQY7jOBAAwfZi///l2cPeOQCFUpLuiOtg7LbshA4qFD9//vz5ATr/1H8A/HYihJgIISZCiIkQYiKEmAghJkKI/bv4t8/n89rfMW09k7D4pEPDDOtru/2myVeWXKK7rC+ROyHERAgxEUJMhBATIcRECDERQkyEEBMhxFYTM2un7cUYGrAYetknV++0+Z6h6Z+1b/r5uRNCTIQQEyHERAgxEUJMhBATIcRECDERQmx/YmbtwEGT91922/bVO3Avy2nzPdvmfiTuhBATIcRECDERQkyEEBMhxEQIMRFCbOph/V1Oe6D8S46v4X/uhBATIcRECDERQkyEEBMhxEQIMRFCTIQQMzEz6MBlE+97f77nOu6EEBMhxEQIMRFCTIQQEyHERAgxEUJMhBCbmpj5mmGIJ+tVvub4mu2dN3/9vxOu++25E0JMhBATIcRECDERQkyEEBMhxEQIsf2H9b9kd8PQc+rkQJi7/tq1b/r5uRNCTIQQEyHERAgxEUJMhBATIcRECDERQuxz3S6Alw0Ni/Bz4R6KIe6EEBMhxEQIMRFCTIQQEyHERAgxEUJMhBCbOhBmYej8kKGXvWuqI9naklyioWmk7UU72y/7404IORFCTIQQEyHERAgxEUJMhBATIcSmHta/fwzIgY+Mh578LgxNLAy96fsP3P9q6LCdNXdCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoitJmaejF+8v6XirpNbkr9naIFFcu7NXT+wNXdCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoh97jrw5P3VNQdKDi1ZSE742TY0/WNiBi4mQoiJEGIihJgIISZCiIkQYiKE2P6BMMkj2vdPF1lLjlhJDi05zdCVT2ZX3AkhJkKIiRBiIoSYCCEmQoiJEGIihJgIITZ1IMz2y247cL3F+5/0wK/s/VNonowNORAGfiMRQkyEEBMhxEQIMRFCTIQQEyHERAix/R0z25K9LNsO3GWy/Um3Zz4OnEbalvz81m/qTggxEUJMhBATIcRECDERQkyEEBMhxD53PTpfOPCB8tDxNUMrGLYXRqz9kof1T7gTQkyEEBMhxEQIMRFCTIQQEyHERAgxEUJsNTEzdwLGQjJgMXRSyoHDGRPuWiyyzYEw8LVECDERQkyEEBMhxEQIMRFCTIQQEyHEgh0zQwtLtheorP9vsgxmyF0zKNsO3IjjQBg4mgghJkKIiRBiIoSYCCEmQoiJEGKXrbc47fH3tiejBUPe/yUMHV+zllx5D+vhaCKEmAghJkKIiRBiIoSYCCEmQoiJEGJT6y3uMrQ1Y+Guy37gHoptQyNZDoSBi4kQYiKEmAghJkKIiRBiIoSYCCEmQohN7Zg5bePLXRtxhra2rH3N/p4D2TEDRxMhxEQIMRFCTIQQEyHERAgxEULs38W/PXnA/TXrG558kKGtGadd2+3PctoExdybrrkTQkyEEBMhxEQIMRFCTIQQEyHERAgxEUJsNTHzTUsN1nMSp82grP2S42sO3ACy4EAYuJgIISZCiIkQYiKEmAghJkKIiRBiIoTYamJm7bQpk6FJiAPHhrav/F3zNMnLJl+3OyHERAgxEUJMhBATIcRECDERQkyEENt/WL924BKBW97xiaGVEAceojL0psnX7U4IMRFCTIQQEyHERAgxEUJMhBATIcRECLGpiZm7vL/Z4ZuGRYau3vZfm8zEPHlTd0KIiRBiIoSYCCEmQoiJEGIihJgIISZCiJmY+fl5MH5x4MKSbYvP8uSDDI22bI/pnHbuzY87IeRECDERQkyEEBMhxEQIMRFCTIQQm3pYf9dz6oUnj4yTHRYLyZfy/kU4cIHFmjshxEQIMRFCTIQQEyHERAgxEUJMhBATIcT2J2ZOGwdJDK1gGHrZbQfuoTjtQJgn3AkhJkKIiRBiIoSYCCEmQoiJEGIihJgIIfY5cIAAfhV3QoiJEGIihJgIISZCiIkQYiKEmAghJkKI/QfOdxtqmV9A+gAAAABJRU5ErkJggg=="}
            };
            cb && cb(data);
        });
    },
    /**
     * 通过js接口在网页中切换底部tab
     *
     * @param {Object} params - 接口入参
     * @param {string} params.index - 切换至下标为index位置的tab
     * @param {callback} cb 功能处理后的回调函数
     */
    switchTab: function (params, cb) {
        bridge.call("native.switchTab", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 通过网页js获取客户端版本信息
     *
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getVersion: function (params, cb) {
        bridge.call("native.version", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data:{"version":"1.0.1"}
                };
            cb && cb(data);
            
        });
    },
    /**
     * 通过网页js获取客户端基本信息
     *
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getSystemInfo: function (params, cb) {
        bridge.call("native.getSystemInfo", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data:{
                        "version":"1.0.1",
                        "pixelRatio":2,
                        "windowWidth":375,
                        "windowHeight":670,
                        "model":"iphone6",
                        "systemVersion":"10.3.1",
                        "platform":"IOS"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过网页js获取系统信息
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getContactInfo: function (params, cb) {
        bridge.call("native.getContactInfo", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data:
                    [{"contactName":"张三","contactTelphone":"123123123123"}
                    ,{"contactName":"李四","contactTelphone":"123123123123"}]
                };
            cb && cb(data);
        });
    },
    /**
     * 通过网页js手机通讯录
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getClipBoardContent: function (params, cb) {
        bridge.call("native.getClipBoardContent", params, cb,function(){
            var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                }, 
                "data":
                    {"type":"text","result":"http://light.hs.net"}
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js接口在网页中复制内容到剪贴板
     * @param {Object} params - 接口入参
     * @param {string} params.value - 需要复制到剪贴板的内容，目前只支持字符串
     * @param {callback} cb 功能处理后的回调函数
     */
    setClipBoardContent: function (params, cb) {
        bridge.call("native.setClipBoardContent", params, cb,function(){
            var data = {    
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js接口在网页中返回指定URL的内容
     * @param {Object} params - 接口入参
     * @param {string} params.url - 网页地址
     * @param {callback} cb 功能处理后的回调函数
     */
    fetchURL: function (params, cb) {
        bridge.call("native.fetchURL", params, cb,function(){
            var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                }, 
                "data":
                    {"MIMEType":"text/html","result":"<html><title>我是标题</title><body>Hello World!</body></html>"}
                };
            cb && cb(data);
        });
    },
    /**
     * js接口在网页中查询存储在native的属性
     * @param {Object} params - 接口入参
     * @param {string} params.key - native存储数据的key
     * @param {Array} params.multi_param - 一次性读取多个值如[{key:key1},{key:key2}]
     * @param {string} params.scope - native存储域
     * @param {callback} cb 功能处理后的回调函数
     */
    readData: function (params, cb) {
        bridge.call("native.readData", params, function(data){
            if(data.info.error_code&&data.info.error_code!='0'){
                data.info={
                    error_code:'10003',
                    error_message:"没有找到符合条件的数据：[key:"+params.key+"]"
                };
            }
            cb(data);
        },function(){
            var gotData = {
                    info:{
                        error_code:'0',
                        error_message:"success"
                    }
                };
            // 89823数据存取及删除接口multi_param字段兼容H5
            if(params.multi_param&&params.multi_param.length>0){
                var dataArray = [];
                params.multi_param.forEach(function(obj){
                    //90257 读取不存在的数据时，web端与APP端返回数据应一致
                    if(localStorage.getItem(obj.key)){
                        dataArray.push({
                            data:{
                                result:localStorage.getItem(obj.key)
                            }
                        });
                    }else{
                        dataArray.push({
                            info:{
                                error_extinfo:'API内部错误：回调对象为空',
                                error_code:'10004',
                                error_info:'API内部处理失败',
                                error_no:'10004'
                            }
                        });
                    }
                    
                });
                gotData.data = dataArray;
            }else{
                //90257 读取不存在的数据时，web端与APP端返回数据应一致
                if(localStorage.getItem(params.key)){
                    gotData.data = {
                            result:localStorage.getItem(params.key)
                    };
                }else{
                    gotData.info.error_code='10003';
                    gotData.info.error_message='没有找到符合条件的数据：[key:'+params.key+']';
                }
            }
            cb && cb(gotData);
        });
    },
    /**
     * 通过js接口在网页中向native保存数据
     * @param {Object} params - 接口入参
     * @param {string} params.key - native存储数据的key
     * @param {string} params.value - 向native保存的数据
     * @param {Array} params.multi_param - 一次性存储多个值如[{key:key1,value:value1},{key:key2,value:value1}]
     * @param {string} params.scope - native存储域
     * @param {callback} cb 功能处理后的回调函数
     */
    writeData: function (params, cb) {
        bridge.call("native.writeData", params, cb,function(){
            // 89823数据存取及删除接口multi_param字段兼容H5
            if(params.multi_param&&params.multi_param.length>0){
                params.multi_param.forEach(function(obj){
                    localStorage.setItem(obj.key,obj.value);
                });
            }else{
                localStorage.setItem(params.key,params.value);
                
            }
            cb && cb();
             
        });
    },
    /**
     * 通过js接口在网页中删除存储在native的属性
     * @param {Object} params - 接口入参
     * @param {string} params.key - native存储数据的key
     * @param {Array} params.multi_param - 一次性删除多个值如[{key:key1},{key:key2}]
     * @param {string} params.scope - native存储域
     * @param {callback} cb 功能处理后的回调函数
     */
    deleteData: function (params, cb) {
        bridge.call("native.deleteData", params, cb,function(){
            // 89823数据存取及删除接口multi_param字段兼容H5
            if(params.multi_param&&params.multi_param.length>0){
                params.multi_param.forEach(function(obj){
                    localStorage.removeItem(obj.key);
                });
            }else{
                localStorage.removeItem(params.key);
            }
            
            cb && cb();
        });
    },
    /**
     * 通过js对web页上的图片进行本地化处理，比如保存至本地，识别图中二维码等。
     * @param {Object} params - 接口入参
     * @param {string} params.image - "web图片数据，支持以下格式：
     *1. 标准http或https图片链接
     *2. 图片base64编码，以base64://开头"
     * @param {callback} cb 功能处理后的回调函数
     */
    imageAction: function (params, cb) {
        bridge.call("native.imageAction", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js调用web返回事件
     * @param {Object} params - 接口入参
     * @param {string} params.number - 返回的页数
     * @param {callback} cb 功能处理后的回调函数
     */
    back: function (params, cb) {
        var paraMeter = params&&params.number ? {number:params.number+""} :{};
        bridge.call("native.back", paraMeter, cb,function(){

            var num ="";
            if(params){
                num = params.number>window.history.length-1?window.history.length-1:params.number;
            }else{
                num=1;
            }
            window.history.go(-num);
        });
    },
    /**
     * 通过js调用web返回事件
     */
    close: function () {
        bridge.call("native.close", {}, null,function(){
            window.history.back();
        });
    },
    /**
     * 通过js接口获取当前网络状态
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getNetworkStatus: function (params, cb) {
        bridge.call("native.getNetworkStatus", params, cb,function(){
            var data = {
                info:{
                    error_code:"0",
                    error_message:"success"
                },
                data:{"result":"WIFI"}
            };
            cb && cb(data);
        });
    },
    /**
     * 获取设备唯一标识码
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getUDID: function (params, cb) {
        bridge.call("native.getUDID", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data:{"UDID":"WDWVYVROJSCNASDASUDBUWROSDAWFAWAWR2137123124182H2E2F"}
                };
            cb && cb(data);
        });
    },
    /**
     * 调用本地dialog样式接口
     * @param {Object} params - 接口入参
     * @param {Object} params.title    -        dialog头部标题
     * @param {Object} params.buttons    -        dialog底部按键
     * @param {Object} params.message    -        dialog的内容
     * @param {Object} params.image        -    dialog需要显示的图片
     * @param {callback} cb 功能处理后的回调函数
     */
    showDialog: function (params, cb) {
        bridge.call("native.showDialog", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }, 
                    "data":{"resultCode":"1"}
                };
            cb && cb(data);
        });
    },
    /**
     * 清除沙盒缓存
     * @param {Object} params - 接口入参
     * @param {string} params.widgetID - H5组件的实例ID
     * @param {callback} cb 功能处理后的回调函数
     */
    clearWidget: function (params, cb) {
        bridge.call("native.clearWidget", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 获取页面性能数据
     * @param {callback} cb 功能处理后的回调函数
     */
    getPerformanceInfo: function (cb) {
        bridge.call("native.getPerformanceInfo", {}, cb,function(){
            var data = {
                    "info":{
                        error_code:"0",
                        error_message:"success"
                    },
                    "data": {
                        "html" : [
                            {
                                "duration" : 512,
                                "networkType" : "cellular",
                                "size" : 2048,
                                "gzip" : false,
                                "compress" : true,
                                "path" : "/index.html",
                                "requestHeader" : {},
                                "responseHeader" : {}
                            }
                        ],
                        "javascript" : [

                        ],
                        "css" : [

                        ],
                        "image" : [

                        ],
                        "video" : [

                        ],
                        "other" : [

                        ]
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 设置沙盒缓存最大值
     * @param {Object} params - 接口入参
     * @param {Object} params.maxCacheSize    -    缓存最大值（单位KB）
     * @param {callback} cb 功能处理后的回调函数
     */
    setMaxCacheSize: function (params, cb) {
        bridge.call("native.setMaxCacheSize", params, cb,function(){
            var data = {
                    info:{
                    error_code:"0",
                    error_message:"success"
                    }, 
                    data: {
                        "result" : "success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 获取当前是否可获取定位状态
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    getLocationStatus: function (params, cb) {
        bridge.call("native.getLocationStatus", params, cb,function(){
            var data = {
                    info:{
                    error_code:"0",
                    error_message:"success"
                    },
                    data: {
                        "authorizationStatus" : 4
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 设置屏幕方向
     * @param {Object} params - 接口入参
     * @param {Object} params.screenOrientation    -    landscape_left:左横屏  landscape_right：右横屏 portrait：竖屏
     * @param {callback} cb 功能处理后的回调函数
     */
    setScreenOrientation: function (params, cb) {
        bridge.call("native.setScreenOrientation", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data: {
                        "result" : "success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 设置屏幕方向
     * @param {Object} params - 接口入参
     * @param {Object} params.supportScreenOrientation    -    以数组形式，添加可设置方向。
     * @param {callback} cb 功能处理后的回调函数
     */
    setSupportScreenOrientation: function (params, cb) {
        bridge.call("native.setSupportScreenOrientation", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    data: {
                        "result" : "success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 发送广播
     * @param {Object} params - 接口入参
     * @param {Object} params.content    -发送广播内容
     * @param {Object} params.action    -发送广播动作key
     * @param {callback} cb 功能处理后的回调函数
     */
    sendContentBroadcast: function (params, cb) {
        bridge.call("native.sendContentBroadcast", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 多语言显示设置
     * @param {Object} params - 接口入参
     * @param {Object} params.language    -语言种类（system跟随系统,en英文，zh中文，zh-Hans\zh-Hans-HK\zh-Hans-MO\zh-Hans-CN 简体中文，zh-Hant\zh-HK\zh-TW 繁體中文，ja日文
     * @param {callback} cb 功能处理后的回调函数
     */
    setMutipleLanguages: function (params, cb) {
        bridge.call("native.setMutipleLanguages", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js分享内容到各平台
     * @param {Object} params - 接口入参
     * @param {Object} params.title            分享标题
     * @param {Object} params.content            分享的描述信息
     * @param {Object} params.url            用户点击分享后打开的链接地址，
     * @param {Object} params.image    一般是标准http或https请求,可支持格式
     * 1.远程图片url，必须以http://或https://开头
     * 2. 图片Base64编码，以base64://开头
     * 3. gmu／gmu_icon目录下的本地文件，相对路径且不包括文件后缀，如使用图片gmu/gmu_icon/test.png, 则次此参数为test"
     * @param {callback} cb 功能处理后的回调函数
     */
    socialShare: function (params, cb) {
        bridge.call("social.share", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 三方登录接口
     * @param {Object} params - 接口入参
     * @param {Object} params.type            登录平台类别,只支持qq,weibo,weixin三个type
     * @param {callback} cb 功能处理后的回调函数
     */
    socialLogin: function (params, cb) {
        bridge.call("social.login", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }, 
                    "data":
                        {"result":{"openId":"o66B4v6OkXA_eu1VOPjfUa72FedE","userName":"镇.翻天","userHeadPic":"http://q.qlogo.cn/qqapp/1105511426/BCDF3A2D8FFF64372D2D114F327E7696/100"}}
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js添加导航栏按钮，目前允许在左右两边各加一个扩展按钮
     * @param {Object} params - 接口入参
     * @param {Object} params.title            文本按钮标题
     * @param {Object} params.icon            "图片按钮的图标，可支持格式：
     * 1. 远程图片url，必须以http://或https://开头
     * 2. 图片Base64编码，以base64://开头
     * 3. gmu／gmu_icon目录下的本地文件，相对路径且不包括文件后缀，如使用图片gmu/gmu_icon/test.png, 则次此参数为test"
     * @param {Object} params.action            "用户点击按钮触发的事件，可支持格式：
     * 1. 标准http或https url
     * 2. 标准gmu协议url
     * 3. JavaScript，以javascript：开头"
     * @param {Object} params.position            若为“left”，按钮添加在左侧，若为“right”，按钮添加在右侧，默认为“right”
     * @param {callback} cb 功能处理后的回调函数
     */
    addButton: function (params, cb) {
        bridge.call("head.addButton", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 通过js删除已添加的导航栏按钮
     * @param {Object} params - 接口入参
     * @param {Object} params.position    -若为“left”，则删除左侧按钮，若为“right”，则删除右侧按钮，默认为“right”
     * @param {callback} cb 功能处理后的回调函数
     */
    removeButton: function (params, cb) {
        bridge.call("head.removeButton", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 通过js修改导航栏背景色
     * @param {Object} params - 接口入参
     * @param {Object} params.color    -颜色，格式为 #ffffff
     * @param {callback} cb 功能处理后的回调函数
     */
    setBackgroundColor: function (params, cb) {
        bridge.call("head.setBackgroundColor", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js修改导航栏背景色
     * @param {Object} params - 接口入参
     * @param {Object} params.title    -标题
     * @param {Object} params.subtitle    -副标题
     * @param {callback} cb 功能处理后的回调函数
     */
    setSubtitle: function (params, cb) {
        bridge.call("head.setSubtitle", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 设置标题栏标题接口
     * @param {Object} params - 接口入参
     * @param {Object} params.title    -标题
     * @param {callback} cb 功能处理后的回调函数
     */
    setTitle: function (params, cb) {
        bridge.call("head.setTitle", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 通过js控制是否隐藏状态栏
     * @param {Object} params - 接口入参
     * @param {Object} params.hidden    -是否隐藏
     * @param {callback} cb 功能处理后的回调函数
     */
    setSystemStatusBar: function (params, cb) {
        bridge.call("head.setSystemStatusBar", params, cb,function(){
            cb && cb();
        });
    },
    openURL: function (params, cb) {
        bridge.call("system.openURL", params, cb,function(){
            location.href=params.url;
            cb && cb();
        });
    },
    /**
     * 通过js获取是否含有手势或指纹验证信息
     * @param {Object} params - 接口入参
     * @param {Object} params.verifyType    -验证方式（FP:指纹 GL:手势）
     * @param {callback} cb 功能处理后的回调函数
     */
    preVerifyOpeation: function (params, cb) {
        bridge.call("validate.preVerifyOpeation", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    },
                    "data":{"result":"true"}
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js调用手势或指纹验证
     * @param {Object} params - 接口入参
     * @param {Object} params.GLOpeationType    -只有verifyType为GL才可用，字段说明(verify:手势验证 set:手势设置 update:手势更新 close:清除手势)
     * @param {Object} params.otherTitle    -其他方式点击按钮title
     * @param {callback} cb 功能处理后的回调函数
     */
    verifyOpeation: function (params, cb) {
        bridge.call("validate.verifyOpeation", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    },
                    "data":{"result":"success"}
                };
            cb && cb(data);
        });
    },
    /**
     * app预览
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    appPreview: function (params, cb) {
        bridge.call("system.appPreview", params, cb,function(){
            cb && cb();
        });
    },
    userlogout: function (cb) {
        bridge.call("user.logout", {}, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过JS向客户端传递推送alias，用于推送服务器定点推送
     * @param {Object} params - 接口入参
     * @param {Object} params.alias    -推送alias，为空字符串时为清除已有alias
     * @param {callback} cb 功能处理后的回调函数
     */
    pushSetAlias: function (params, cb) {
        bridge.call("push.setAlias", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 通过js登录用户
     * @param {Object} params - 接口入参
     * @param {Object} params.uid			-用户hsid
     * @param {Object} params.mobile			-用户手机号码
     * @param {Object} params.token			-用户令牌
     * @param {Object} params.nickname			-用户昵称
     * @param {Object} params.photoURL			-用户头像地址
     * @param {Object} params.logoutWhenExit			-app退出后是否注销当前用户
     * @param {callback} cb 功能处理后的回调函数
     */
    userLogin: function (params, cb) {
        bridge.call("user.login", params, cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * 调试
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    debugOpen: function (params, cb) {
        bridge.call("debug.open", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 调试
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    debugClose: function (params, cb) {
        bridge.call("debug.close", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 调试
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    debugCheck: function (params, cb) {
        bridge.call("debug.check", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 判断各个平台app在设备上是否已安装
     * @param {Object} params - 接口入参
     * @param {Object} params.type -平台类型，目前type值只支持'qq'，'weibo'，'weixin'三个
     * @param {callback} cb 功能处理后的回调函数
     */
    socialAppInstalled:function(params,cb){
        bridge.call("social.isAppInstalled", params, cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }, 
                    "data":
                        {"result":"success","status":"true"}
                };
            cb && cb(data);
        });
    },
    /**
     * 按键精灵查询数据接口
     * @param {Object} params - 接口入参
     * @param {Object} params.prod_code -产品代码,关键字，如：prod_code=00570 表示查询含 00570 的证券代码
     * @param {Object} params.en_finance_mic -交易所识别码集合,多个交易所识别码,逗号(,)分割。如："finance_mic":["SS","SZ"]，且按照参数的先后顺序优先查找
     * @param {Object} params.data_count -数据个数,不指定默认返回50个代码
     * @param {callback} cb 功能处理后的回调函数
     */
    quoteWizard: function (params, cb) {
        bridge.call("quote.wizard",params,cb,function(){
            var data = {
                info:{
                    error_code:"0",
                    error_message:"success"
                },
                "data": [
                    {
                        "prod_code": "600060.SS",
                        "prod_name": "海信电器",
                        "hq_type_code": "XSHG"
                    },
                    {
                        "prod_code": "600570.SS",
                        "prod_name": "恒生电子",
                        "hq_type_code": "XSHG"
                    },
                    {
                        "prod_code": "300141.SZ",
                        "prod_name": "和顺电气",
                        "hq_type_code": "XSHG"
                    },
                    {
                        "prod_code": "300173.SZ",
                        "prod_name": "智慧松德",
                        "hq_type_code": "XSHG"
                    }
                ]
            };
            cb && cb(data);
        });
    },
    /**
     * 行情报价查询数据接口
     * @param {Object} params - 接口入参
     * @param {array} params.en_prod_code -产品代码集数组
     * @param {array} params.fields -需要返回的字段集数组
     * @param {callback} cb 功能处理后的回调函数
     */
    quoteReal: function (params, cb) {
        bridge.call("quote.real",params,cb,function(){
            var data = {
                    info:{
                    error_code:"0",
                    error_message:"success"
                    },
                    data: {}
                };
            cb && cb(data);
        });
    },
    /**
     * 行情股票排序
     * @param {Object} params - 接口入参
     * @param {Object} params.en_prod_code -证券代码
     * @param {Object} params.en_hq_type_code -类型代码，使用逗号（,）连接。 类型代码可以是交易所识别码或交易所识别码和金融品种分类识别码两者组合而成
     * @param {Object} params.sort_field_name -指定进行排序的字段,允许field中的字段
     * @param {Object} params.sort_type -排序方式，0：表示升序； 1：表示降序(默认)
     * @param {Object} params.data_count -指定返回的数据个数，默认20个
     * @param {Object} params.start_pos -指定从排序结果集的第start_pos个记录开始，默认从首个记录开始
     * @param {array} params.fields -需要返回的字段集数组
     * @param {callback} cb 功能处理后的回调函数
     */
    quoteSort: function (params, cb) {
        bridge.call("quote.sort",params,cb,function(){
            var data = {
                    info:{
                        error_code:"0",
                        error_message:"success"
                    },
                    "data": {
                        "sort":{}
                        }
                    };
            cb && cb();
        });
    },
    /**
     * 设置导航栏搜索视图
     * @param {Object} params - 接口入参
     * @param {Object} params.prod_code -产品代码,关键字，如：prod_code=00570 表示查询含 00570 的证券代码
     * @param {Object} params.en_finance_mic -交易所识别码集合,多个交易所识别码,逗号(,)分割。如："finance_mic":["SS","SZ"]，且按照参数的先后顺序优先查找
     * @param {Object} params.data_count -数据个数,不指定默认返回50个代码
     * @param {callback} cb 功能处理后的回调函数
     */
    headSetSearchView: function (params, cb) {
        bridge.call("head.setSearchView",params,cb,function(){
            var data = {
                "info": {
                "error_code": "0",
                "error_message": "success"
                },
                "data": {
                "status": "click"
                }
            };
            cb && cb(data);
        });
    },
    /**
     * 修改导航栏透明度
     * @param {Object} params - 接口入参
     * @param {Object} params.alpha -设置透明度，透明度设置越小越透明
     * @param {callback} cb 功能处理后的回调函数
     */
    headSetAlpha: function (params, cb) {
        bridge.call("head.setAlpha",params,cb,function(){
            var data = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }
                };
            cb && cb(data);
        });
    },
    /**
     * getSafeArea方法获取安全区域接口(适配iphoneX)
     * @deprecated
     * @param params
     * @param cb
     */
    getSafeArea:function (params, cb) {
        bridge.call("native.getSafeArea",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * getTags获取当前用户的所有标签
     * @deprecated
     * @param params
     * @param cb
     */
    pushGetTags:function (params, cb) {
        bridge.call("push.getTags",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * deleteTags当前用户删除标签
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {array} params.tags -用户所传的标签集合
     * @param cb
     */
    pushDeleteTags:function (params, cb) {
        bridge.call("push.deleteTags",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * addTags当前用户添加标签
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {array} params.tags -用户所传的标签集合
     * @param cb
     */
    pushAddTags:function (params, cb) {
        bridge.call("push.addTags",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * getRegistrationID获取推送registrationID
     * @deprecated
     * @param {Object} params - 接口入参
     * @param cb
     */
    pushGetRegistrationID:function (params, cb) {
        bridge.call("push.getRegistrationID",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * add添加自选股
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.stockCode -股票代码
     * @param {string} params.codeType -股票市场代码
     * @param cb
     */
    mystockAdd:function (params, cb) {
        bridge.call("mystock.add",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * delete删除自选股
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.stockCode -股票代码
     * @param {string} params.codeType -股票市场代码
     * @param cb
     */
    mystockDelete:function (params, cb) {
        bridge.call("mystock.delete",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * list获取自选股列表
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.stockCode -股票代码
     * @param {string} params.codeType -股票市场代码
     * @param cb
     */
    mystockList:function (params, cb) {
        bridge.call("mystock.list",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * show打开安全键盘
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.textshow -股票代码
     * @param {string} params.disorder -数字顺序是否打乱，none:不乱序。number:只有数字乱序
     * @param {string} params.pressEffect -按钮点击效果，default:按钮点击后有点击效果,none:没有点击效果
     * @param {string} params.keyboardType -number:数字键盘,alpha:字母键盘,symbol:符号键盘。配置组合支持四种：number|alpha、alpha|symbol、number、alpha|number|symbol、三者之间配置顺序可改变。默认为alpha|number|symbol
     * @param {string} params.maxLength -设置最大输入长度，默认为16
     * @param {string} params.encryptMode -设置加密方式，可选项有:AES（16个倍数的任意字符）、RSA（一大串字符）、MD5、SM2（x&y）、SM3(无)、SM4（16个任意字符）。不配置默认为MD5加密。
     * @param {string} params.secretKey -密钥，若指定加密方式需要密钥则必须传递，否则不需要传递。若加密方式为SM2则传入的x,y密钥之间用‘&’符号连接，例如: "aaaaaaa&bbbbbb"
     * @param {string} params.titleText -设置键盘顶部自定义文案，不配置或者配置字符串为空默认为“恒生安全输入键盘”
     * @param cb
     */
    safekeyboardShow:function (params, cb) {
        bridge.call("safekeyboard.show",params,cb,function(){
             var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                },
                "data":{"index":"2",action:"plus",content:"2"}
            };
            cb && cb(data);
        });
    },
    /**
     * hide关闭安全键盘
     * @deprecated
     * @param {Object} params - 接口入参
     * @param cb
     */
    safekeyboardHide:function (params, cb) {
        bridge.call("safekeyboard.hide",params,cb,function(){
            var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                }
            };
            cb && cb(data);
        });
    },
    /**
     * tradekeyboardShow打开交易键盘
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.type -验证方式（price:交易价格键盘 volume:交易量键盘 search:股票代码搜索键盘）
     * @param {array} params.buttons -键盘工具栏按钮
     * @param {string} params.describe -键盘工具类描述
     * @param cb
     */
    tradekeyboardShow:function (params, cb) {
        bridge.call("tradekeyboard.show",params,cb,function(){
             var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                },
                "data":{"index":"2",action:"plus",content:"2"}
            };
            cb && cb(data);
        });
    },
    /**
     * tradekeyboardHide关闭交易键盘
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.type -验证方式（price:交易价格键盘 volume:交易量键盘 search:股票代码搜索键盘）
     * @param cb
     */
    tradekeyboardHide:function (params, cb) {
        bridge.call("tradekeyboard.hide",params,cb,function(){
             var data = {
                "info": {
                    "error_code": "0",
                    "error_message": "success"
                }
            };
            cb && cb(data);
        });
    },
    /**
     * connectRong连接融云服务器
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.userId -用户id
     * @param {string} params.userName -用户名称
     * @param {string} params.imgUrl -头像图片url
     * @param {string} params.RY_AppKey -融云AppKey
     * @param {string} params.RY_AppSecret -融云AppSecret
     * @param cb
     */
    chatConnectRong:function (params, cb) {
        bridge.call("chat.connectRong",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * getConverationRecords获取当前登入用户的聊天记录
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.userId -用户id
     * @param {string} params.userName -用户名称
     * @param {string} params.imgUrl -头像图片url
     * @param {string} params.RY_AppKey -融云AppKey
     * @param {string} params.RY_AppSecret -融云AppSecret
     * @param cb
     */
    chatGetConverationRecords:function (params, cb) {
        bridge.call("chat.getConverationRecords",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * disconnectRong断开融云服务器
     * @deprecated
     * @param {Object} params - 接口入参
     * @param cb
     */
    chatDisconnectRong:function (params, cb) {
        bridge.call("chat.disconnectRong",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * startConversition打开聊天室
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {string} params.userId -用户id
     * @param {string} params.userName -用户名称
     * @param {string} params.imgUrl -头像图片url
     * @param {string} params.targetUserId -聊天对象id
     * @param {string} params.targetUserName -聊天对象名称
     * @param {string} params.groupId -聊天室id
     * @param {string} params.groupName -聊天室名称
     * @param {string} params.conversitionType -聊天类型（privateChat：单独聊天，group:聊天室）
     * @param {string} params.RY_AppKey -融云AppKey
     * @param {string} params.RY_AppSecret -融云AppSecret
     * @param cb
     */
    chatStartConversition:function (params, cb) {
        bridge.call("chat.startConversition",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * getLocation获取经纬度
     * @deprecated
     * @param {Object} params - 接口入参
     * @param {int} params.scanSpan -定位刷新间隔（单位微秒）
     * @param cb
     */
    getLocation:function (params, cb) {
        bridge.call("location.getLocation",params,cb,function(){
            //89815 getLocation获取经纬度接口兼容H5
            var gotParams = {
                info:{
                    error_code:"0",
                    error_message:"success"
                },
                data:{
                    result:{
                        longitude:32.34444,
                        latitude:33.3333
                    }
                }
            };
            cb && cb(gotParams);
        });
    },
    /**
     * stopLocation关闭定位服务
     * @deprecated
     * @param {Object} params - 接口入参
     * @param cb
     */
    stopLocation:function (params, cb) {
        bridge.call("location.stopLocation",params,cb,function(){
            cb && cb();
        });
    },
    /**
     * 通过js设置登录用户信息
     * @param {Object} params - 接口入参
     * @param {Object} params.uid			-用户hsid
     * @param {Object} params.mobile			-用户手机号码
     * @param {Object} params.token			-用户令牌
     * @param {Object} params.nickname			-用户昵称
     * @param {Object} params.photoURL			-用户头像地址
     * @param {Object} params.logoutWhenExit			-app退出后是否注销当前用户
     * @param {Object} params.extraInfo			-用户额外信息
     * @param {callback} cb 功能处理后的回调函数
     */
    userSetInfo: function (params, cb) {
        bridge.call("user.setInfo", params, cb,function(){
            cb && cb();
        });
    },

    //////////////////////////与文档标识不一致的接口//////////////////////////////////////////
    /**
     * 开始音频采集
     * @param {callback} cb 功能处理后的回调函数
     * @param maxTime - maxTime是音频录制的最长时间，以秒为单位
     */
    startRecord: function (cb, maxTime) {
        bridge.call("media.audio.startRecord", {
            "duration": maxTime || "60"
        }, function (data) {
            cb && cb(data.data.result);
        }, function (data) {
            cb && cb();
        });
    },
    /**
     * 结束音频采集
     */
    stopRecord: function () {
        bridge.call("media.audio.stopRecord", {}, null, function (data) {
            cb && cb();
        });
    },
    /**
     * 获取用户信息
     * @param cb
     */
    userGetInfo: function (cb) {
        bridge.call("user.getInfo", {}, function (userInfo) {
            if (userInfo.data) {
                cb && cb(userInfo.data.result);
            } else {
                cb();
            }
        },function(){
            cb && cb();
        });
    },
    /**
     * 支付-通过js传入经服务器加签后的订单信息(orderInfo)并调用相应支付渠道SDK的支付接口
     * @param {Object} params - 接口入参
     * @param {string} params.channel_id -021:支付宝钱包022:微信钱包
     * @param {Object} params.orderInfo			-
     * @param {Object} params.isSandBox			-是否进入沙箱环境
     * @param {callback} cb 功能处理后的回调函数
     */
    tradePay: function (params, cb) {
        bridge.call("trade.pay", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 图片预览功能
     * @param {Object} params - 接口入参
     * @param {Array} params.images -图片地址 
     * @param {callback} cb 功能处理后的回调函数
     */
    imagePreview: function (params, cb) {
        bridge.call("native.imagePreview", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 文件预览功能-支持pdf doc exl ppt
     * @param {Object} params - 接口入参
     * @param {string} params.url -需要打开的文件地址
     * @param {callback} cb 功能处理后的回调函数
     */
    filePreview: function (params, cb) {
        bridge.call("file.preview", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 文件下载-支持pdf doc exl ppt
     * @param {Object} params - 接口入参
     * @param {string} params.path -文件存放的相对路径，以’/‘开头，例’/aaa/bbb.docx’
     * @param {string} params.url -文件的远程地址
     * @param {string} params.data -文件数据的base64编码字符串（url与data至少有一个不为空，优先取url的值
     * @param {bool} params.overwrite -是否覆盖（默认不覆盖）
     * @param {callback} cb 功能处理后的回调函数
     */
    fileSave: function (params, cb) {
        bridge.call("file.save", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 推送监听事件
     * @param {Object} params - 接口入参
     * @param {callback} cb 功能处理后的回调函数
     */
    pushAddEventListener: function (params, cb) {
        bridge.call("push.addEventListener", {}, cb,function(){
            cb && cb();
        });
    },
    /**
     * 苹果内购接口
     * @param {Object} params - 接口入参
     * @param {string} params.apple_product_id -苹果商品ID(需要在苹果itunes connect平台创建商品)
     * @param {string} params.orderId -商户订单号(此订单号为客户自己业务生成的订单号，用于最后一步校验苹果收据时做检测唯一性使用，保证内购链路完整性)
     * @param {callback} cb 功能处理后的回调函数
     */
    iapPurchase: function (params, cb) {
        bridge.call("iap.purchase", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 打印日志
     * @param {Object} params - 接口入参
     * @param {string} params.level -日志级别，取值有info,error,debug,warn,verbose
     * @param {string} params.content -日志内容
     * @param {callback} cb 功能处理后的回调函数
     */
    log: function (params, cb) {
        var inputParams={
            content:params.content
        };
        switch(params.level)
        {
        case 'info':
            bridge.call("log.info", inputParams, cb,function(){
                cb && cb();
            });
             break;
        case 'error':
            bridge.call("log.error", inputParams, cb,function(){
                cb && cb();
            });
            break;
        case 'debug':
            bridge.call("log.debug", inputParams, cb,function(){
                cb && cb();
            });
            break;
        case 'warn':
            bridge.call("log.warn", inputParams, cb,function(){
                cb && cb();
            });
            break;
        case 'verbose':
            bridge.call("log.verbose", inputParams, cb,function(){
                cb && cb();
            });
            break;
        default:
            bridge.call("log.info", inputParams, cb,function(){
                cb && cb();
            });
        }
        
    },
    /**
     * 设置首页tab小红点
     * @param {Object} params - 接口入参
     * @param {number} params.index -tab的index，值从0开始计数，须在tab个数范围内
     * @param {number} params.type -0表示红点，1表示文本，默认为0
     * @param {string} params.value -type为0时，忽略value字段值为""以外的所有值。若value为"",则清除红点。type为1时，value为必须字段，显示在红点中心的文本,若value为"",则清除文本
     * @param {callback} cb 功能处理后的回调函数
     */
    setTabBarBadge: function (params, cb) {
        bridge.call("native.setTabBarBadge", params, cb,function(){
            cb && cb();
        });
    },
    /**
     * 通过JS发送统计分析埋点事件
     * @param {Object} params - 接口入参
     * @param {string} params.event -事件ID，被统计事件的唯一标识
     * @param {object} params.attributes -事件附加属性，用户可根据业务需求为事件添加附加属性，默认值为{}
     * @param {number} params.duration -事件时长（毫秒），该字段可以为持续性事件标识事件持续的时长，默认值为0
     * @param {callback} cb 功能处理后的回调函数
     */
    analyticsSendEvent: function (params, cb) {
        bridge.call("analytics.sendEvent", params, cb,function(){
            var outParams = {
                    "info": {
                        "error_code": "0",
                        "error_message": "success"
                    }
                };
            cb && cb(outParams);
        });
    },
    ////////////////////////////封装后的接口///////////////////////////////////////////
    /**
     * 本地存储数据
     * @deprecated
     * @param data
     * @param cb
     */
    writeGlobalData: function (data, cb) {
        console.error("writeGlobalData接口已经过期，请使用LightSDK.native.writeData");
        var length = Object.keys(data).length;
        Object.keys(data).forEach(function (key) {
            if (data[key] !== null) {
                bridge.call("native.writeData", {
                    key: key,
                    value: data[key] || {}
                }, function () {
                    length--;
                    if (length === 0) {
                        cb && cb();
                    }
                });
            } else {
                bridge.call("native.deleteData", {
                    "key": key
                }, function () {
                    length--;
                    if (length === 0) {
                        cb && cb();
                    }
                });
            }
        });
    },
    /**
     * 本地读取数据
     * @deprecated
     * @param key
     * @param cb
     */
    readGlobalData: function (key, cb) {
        console.error("readGlobalData，请使用LightSDK.native.readData");
        bridge.call("native.readData", {
            key: key,
        }, function (data) {
            if (data && data.data && data.data.result) {
                cb && cb(data.data.result);
            } else {
                cb && cb(null);
            }
        });
    },
    
    /**
     * native方法调用通用方法(用户根据已有native方法自己调用)
     * @deprecated
     * @param method
     * @param params
     * @param cb
     */
    callNative: function (method, params, cb) {
        // console.error("callNative接口已经过期");
        var outParams = {
            error_no: "0",
            error_info: "success"
        };
        bridge.call(method, params, function (data) {
            cb && cb(data);
        },function(){
            cb && cb(outParams);
        });
    },
};

function request(url,params,cb) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function onReadyStateChange() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                cb(JSON.parse(xhr.responseText));
            }else{
                console.error(xhr.status);
            }
        }
    };
    xhr.open('GET', (url + "?" + (parse2query(params))), true);
    xhr.send(null);
}

function parse2query(data) {
    var string = "";
    Object.keys(data).forEach(function (key) {
        string+=key + "=" + (data[key]) + "&";
    });
    string=string.substring(0,string.length-1);
    return string;
}

var cid='';
var iid='';
var env = __ENV__;

//project.json中有个link_id可以复用成cid就不需要配置cid了
if(env&&env.link_id){
    cid = env.link_id;
}

var light = {
    register:function (options) {
        console.error("此接口已经过期，将在下个版本移除！！！");
        cid = options.cid||"";
        iid = options.iid||"";
    },
    config:{
        get: function get(cb){
            // 81083 light-sdk中config的信息本地化处理
            native_1.readData({
                key:"__LIGHT_configParams"
            },function(data){
                if(data&&data.data&&data.data.result){
                    cb(data.data.result);
                }else{
                    request("https://light.hscloud.cn/data/flatservice/param/getparams.json",{
                        compId:cid,
                        instanceId:iid,
                    },function(data){
                        cb(data.data);
                        if(data.data&&data.data!={}){
                            native_1.writeData({
                                key:"__LIGHT_configParams",
                                value:JSON.stringify(data.data)
                            });
                        }
                        
                    });
                }
            });
            
        }
    },
    openAPI:{
        token:function (cb) {
            return request("https://light.hscloud.cn/data/flatservice/openapi/token",{
                compId:cid
            },cb)
        }
    }
};

var openAPI = light.openAPI;
var config = light.config;
var register = light.register;

var lightSdk = {
    /**
     * @deprecated
     */
    register: register,

    native:native_1,
    openAPI: openAPI,
    config: config,
};

var lightSdk_1 = lightSdk.register;
var lightSdk_2 = lightSdk.openAPI;
var lightSdk_3 = lightSdk.config;

exports['default'] = lightSdk;
exports.register = lightSdk_1;
exports.openAPI = lightSdk_2;
exports.config = lightSdk_3;

Object.defineProperty(exports, '__esModule', { value: true });

})));
